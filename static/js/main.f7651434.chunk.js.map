{"version":3,"sources":["components/Todo.tsx","components/TodoList.tsx","api/getData.ts","api/constatns.ts","components/Actions.tsx","App.tsx","store.ts","index.tsx"],"names":["Todo","connect","state","dispatch","setDeteteTodo","id","type","index","title","completed","user","className","name","onClick","TodoList","data","todos","map","item","key","getData","url","a","fetch","response","json","getTodos","getUsers","Actions","setTitleSort","setUserSort","setCompleteSort","setReverseTodos","App","isLoaded","isLoading","setIsLoaded","setIsLoading","status","setTodos","Promise","all","todosFromServer","usersFromServer","todo","find","userId","initialState","store","createStore","action","sort","b","Number","localeCompare","reverse","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7651434.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\ninterface Props {\n  id: number;\n  title: string;\n  completed: boolean;\n  user?: User;\n  setDeteteTodo: (id: number) => void;\n}\n\nconst TodoTemplate: FC<Props> = ({\n  id, title, completed, user, setDeteteTodo,\n}) => {\n  return (\n    <>\n      <p className=\"title\">{`${id} ${title}`}</p>\n      {completed\n        ? (<p className=\"completed\">Yes</p>)\n        : (<p className=\"not-completed\">No</p>)}\n      {user && (<p>{user.name}</p>)}\n      <button\n        type=\"button\"\n        className=\"button--close\"\n        onClick={() => setDeteteTodo(id)}\n      >\nX\n      </button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: GlobalState) => ({\n  ...state,\n});\n\nconst mapDispatchToProps = (dispatch: (arg0: { type: string; index: number }) => unknown) => {\n  return {\n    setDeteteTodo: (id: number) => dispatch({ type: 'DELETE_TODO', index: id }),\n  };\n};\n\n\nexport const Todo = connect(mapStateToProps, mapDispatchToProps)(TodoTemplate);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Todo } from './Todo';\n\ninterface Props {\n  data: Todo[];\n}\n\nexport const TodoListTemplate: FC<Props> = ({ data }) => (\n  <>\n    <h1>Todo List</h1>\n    <ul className=\"card-list\">\n      {data.map(item => (\n        <li className=\"card-item\" key={item.id}>\n          <>\n            <Todo {...item} />\n          </>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nconst mapStateToProps = (state: GlobalState) => ({\n  ...state,\n  data: state.todos,\n});\n\nexport const TodoList = connect(mapStateToProps)(TodoListTemplate);\n","import { URL_TODOS, URL_USES } from './constatns';\n\nasync function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData(URL_TODOS);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData(URL_USES);\n};\n","export const URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\r\nexport const URL_USES = 'https://jsonplaceholder.typicode.com/users';","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\ninterface Props {\n  setTitleSort: () => void;\n  setUserSort: () => void;\n  setCompleteSort: () => void;\n  setReverseTodos: () => void;\n}\n\nconst ActionsTemplate: FC<Props> = ({\n  setTitleSort, setUserSort, setCompleteSort, setReverseTodos,\n}) => (\n  <>\n    <button className=\"button\" type=\"button\" onClick={setTitleSort}>Sort by title</button>\n    <button className=\"button\" type=\"button\" onClick={setUserSort}>Sort by user</button>\n    <button className=\"button\" type=\"button\" onClick={setCompleteSort}>Sort by completed</button>\n    <button className=\"button\" type=\"button\" onClick={setReverseTodos}>Reverse</button>\n  </>\n);\n\nconst mapStateToProps = (state: GlobalState) => ({ ...state });\n\nconst mapDispatchToProps = (dispatch: (arg0: { type: string }) => unknown) => {\n  return {\n    setTitleSort: () => dispatch({ type: 'SORT_BY_TITLE' }),\n    setUserSort: () => dispatch({ type: 'SORT_BY_USER' }),\n    setCompleteSort: () => dispatch({ type: 'SORT_BY_COMPLETED' }),\n    setReverseTodos: () => dispatch({ type: 'REVERSE_TODOS' }),\n  };\n};\n\nexport const Actions = connect(mapStateToProps, mapDispatchToProps)(ActionsTemplate);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport './App.css';\nimport { getTodos, getUsers } from './api/getData';\nimport { Actions } from './components/Actions';\n\ninterface Methods {\n  setIsLoaded: () => void;\n  setIsLoading: (status: boolean) => void;\n  setTodos: (todos: Todo[]) => void;\n}\n\ntype Props = GlobalState & Methods;\n\n\nconst AppTemplate: FC<Props> = ({\n  isLoaded, isLoading, setIsLoaded,\n  setIsLoading, setTodos,\n}) => {\n  async function handleStart() {\n    setIsLoaded();\n    setIsLoading(true);\n\n    const [\n      todosFromServer,\n      usersFromServer,\n    ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]);\n\n    setTodos(todosFromServer.map((todo) => (\n      {\n        ...todo,\n        user: usersFromServer\n          .find((user) => user.id === todo.userId),\n      })));\n\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      {isLoaded\n    && (\n      <Actions />\n    )}\n\n      {!isLoaded\n     && (\n       <button\n         className=\"button\"\n         type=\"button\"\n         onClick={handleStart}\n       >\n       Press to start\n       </button>\n     )}\n      {isLoading ? <p>Loading...</p> : <TodoList />}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: GlobalState) => {\n  return {\n    ...state,\n    isLoaded: state.isLoaded,\n    isLoading: state.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch:\n(arg0: { type: string; isLoaded?: boolean; isLoading?: boolean; todos?: Todo[] }) => unknown) => {\n  return {\n    setIsLoaded: () => dispatch({ type: 'SET_IS_LOADED', isLoaded: true }),\n    setIsLoading: (status: boolean) => dispatch({ type: 'SET_IS_LOADING', isLoading: status }),\n    setTodos: (todos: Todo[]) => dispatch({ type: 'SET_TODOS', todos: [...todos] }),\n  };\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppTemplate);\n","import { createStore, AnyAction } from 'redux';\n\nconst initialState: GlobalState = {\n  isLoaded: false,\n  isLoading: false,\n  todos: [],\n};\n\n// const loadReducer = (state = initialState, action: AnyAction): GlobalState => {\n//   switch (action.type) {\n//     case 'SET_IS_LOADED':\n//       return {\n//         ...state,\n//         isLoaded: action.isLoaded,\n//       };\n//     case 'SET_IS_LOADING':\n//       return {\n//         ...state,\n//         isLoading: action.isLoading,\n//       };\n//     case 'SET_TODOS':\n//       return {\n//         ...state,\n//         todos: [...action.todos],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// const sortReducer = (state = initialState, action: AnyAction): GlobalState => {\n//   switch (action.type) {\n//     case 'SORT_BY_COMPLETED':\n//       return {\n//         ...state,\n//         todos: [...state.todos\n//           .sort((a, b) => {\n//             return Number(a.completed) - Number(b.completed);\n//           })],\n//       };\n//     case 'SORT_BY_USER':\n//       return {\n//         ...state,\n//         todos: [...state.todos\n//           .sort((a, b) => {\n//             if (a.user && b.user) {\n//               return a.user.name.localeCompare(b.user.name);\n//             }\n\n//             return 0;\n//           })],\n//       };\n//     case 'SORT_BY_TITLE':\n//       return {\n//         ...state,\n//         todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n//       };\n//     case 'REVERSE_TODOS':\n//       return {\n//         ...state,\n//         todos: [...state.todos.reverse()],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// const deleteReducer = (state = initialState, action: AnyAction): GlobalState => {\n//   switch (action.type) {\n//     case 'DELETE_TODO':\n//       return {\n//         ...state,\n//         todos: [...state.todos.filter(todo => todo.id !== action.index)],\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// const reducer = combineReducers({\n//   loadReducer,\n//   sortReducer,\n//   deleteReducer,\n// });\n\nconst reducer = (state = initialState, action: AnyAction): GlobalState => {\n  switch (action.type) {\n    case 'SET_IS_LOADED':\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n    case 'SET_IS_LOADING':\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n    case 'SORT_BY_COMPLETED':\n      return {\n        ...state,\n        todos: [...state.todos\n          .sort((a, b) => {\n            return Number(a.completed) - Number(b.completed);\n          })],\n      };\n    case 'SORT_BY_USER':\n      return {\n        ...state,\n        todos: [...state.todos\n          .sort((a, b) => {\n            if (a.user && b.user) {\n              return a.user.name.localeCompare(b.user.name);\n            }\n\n            return 0;\n          })],\n      };\n    case 'SORT_BY_TITLE':\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => a.title.localeCompare(b.title)),\n      };\n    case 'REVERSE_TODOS':\n      return {\n        ...state,\n        todos: [...state.todos.reverse()],\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: [...state.todos.filter(todo => todo.id !== action.index)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}