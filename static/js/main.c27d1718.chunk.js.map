{"version":3,"sources":["redux/actions.ts","components/Todo.tsx","components/TodoList.tsx","api/getData.ts","api/constatns.ts","components/Actions.tsx","App.tsx","redux/reducers/loadReducer.ts","redux/reducers/todoReducer.ts","redux/reducers/queryReducer.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["type","Todo","connect","dispatch","setDeleteTodo","id","index","actions","title","completed","user","className","name","onClick","TodoList","state","todos","todosReducer","query","queryReducer","todosToShow","useMemo","length","sort","a","b","localeCompare","Number","reverse","map","todo","key","getData","url","fetch","response","json","getTodos","getUsers","Actions","setQuery","App","isLoaded","loadReducer","isLoading","setIsLoaded","status","setIsLoading","setTodos","Promise","all","todosFromServer","usersFromServer","find","userId","loadState","todosState","queryState","reducer","combineReducers","action","filter","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c27d1718.chunk.js","sourcesContent":["export const type = {\n  SET_IS_LOADED: 'SET_IS_LOADED',\n  SET_IS_LOADING: 'SET_IS_LOADING',\n  SET_QUERY_SORT: 'SET_QUERY_SORT',\n  SET_TODOS: 'SET_TODOS',\n  DELETE_TODO: 'DELETE_TODO',\n};\n\nexport const setIsLoaded = (value: boolean) => ({\n  type: type.SET_IS_LOADED,\n  isLoaded: value,\n});\n\nexport const setIsLoading = (value: boolean) => ({\n  type: type.SET_IS_LOADING,\n  isLoading: value,\n});\n\nexport const setQuerySort = (value: string) => ({\n  type: type.SET_QUERY_SORT,\n  query: value,\n});\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: type.SET_TODOS,\n  todos: [...todos],\n});\n\nexport const setDeleteTodo = (id: number) => ({\n  type: type.DELETE_TODO,\n  index: id,\n});\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport * as actions from '../redux/actions';\n\ninterface Props {\n  id: number;\n  title: string;\n  completed: boolean;\n  user?: User;\n  setDeleteTodo: (id: number) => void;\n}\n\nconst TodoTemplate: FC<Props> = ({\n  id, title, completed, user, setDeleteTodo,\n}) => {\n  return (\n    <>\n      <p className=\"title\">{`${id} ${title}`}</p>\n      {completed\n        ? (<p className=\"completed\">Yes</p>)\n        : (<p className=\"not-completed\">No</p>)}\n      {user && (<p>{user.name}</p>)}\n      <button\n        type=\"button\"\n        className=\"button--close\"\n        onClick={() => setDeleteTodo(id)}\n      >\n        X\n      </button>\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setDeleteTodo: (id: number) => dispatch(\n      actions.setDeleteTodo(id),\n    ),\n  };\n};\n\nexport const Todo = connect(null, mapDispatchToProps)(TodoTemplate);\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { Todo } from './Todo';\n\ninterface Props {\n  todos: Todo[];\n  query: string;\n}\n\nexport const TodoListTemplate: FC<Props> = ({ todos, query }) => {\n  const todosToShow = useMemo(() => {\n    if (!todos.length) {\n      return [];\n    }\n\n    switch (query) {\n      case 'title':\n        return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n      case 'user':\n        return [...todos\n          .sort((a, b) => {\n            if (a.user && b.user) {\n              return a.user.name.localeCompare(b.user.name);\n            }\n\n            return 0;\n          })];\n      case 'completed':\n        return [...todos\n          .sort((a, b) => {\n            return Number(a.completed) - Number(b.completed);\n          })];\n      case 'reverse':\n        return [...todos.reverse()];\n      default:\n        return todos;\n    }\n  }, [query, todos]);\n\n  return (\n    <>\n      <h1>Todo List</h1>\n      <ul className=\"card-list\">\n        {todosToShow.map(todo => (\n          <li className=\"card-item\" key={todo.id}>\n            <>\n              <Todo {...todo} />\n            </>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: { todosReducer: TodoState; queryReducer: QuerySort }) => ({\n  todos: state.todosReducer.todos,\n  query: state.queryReducer.query,\n});\n\nexport const TodoList = connect(mapStateToProps)(TodoListTemplate);\n","import { URL_TODOS, URL_USES } from './constatns';\n\nasync function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData(URL_TODOS);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData(URL_USES);\n};\n","export const URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\r\nexport const URL_USES = 'https://jsonplaceholder.typicode.com/users';","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setQuerySort } from '../redux/actions';\n\ninterface Props {\n  setQuery: (query: string) => void;\n}\n\nconst ActionsTemplate: FC<Props> = ({\n  setQuery,\n}) => (\n  <>\n    <button className=\"button\" type=\"button\" onClick={() => setQuery('title')}>Sort by title</button>\n    <button className=\"button\" type=\"button\" onClick={() => setQuery('user')}>Sort by user</button>\n    <button className=\"button\" type=\"button\" onClick={() => setQuery('completed')}>Sort by completed</button>\n    <button className=\"button\" type=\"button\" onClick={() => setQuery('reverse')}>Reverse</button>\n  </>\n);\n\nconst mapStateToProps = (state: { queryReducer: QuerySort }) => {\n  return {\n    query: state.queryReducer.query,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setQuery: (query: string) => dispatch(setQuerySort(query)),\n  };\n};\n\nexport const Actions = connect(mapStateToProps, mapDispatchToProps)(ActionsTemplate);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { TodoList } from './components/TodoList';\nimport './App.css';\nimport { getTodos, getUsers } from './api/getData';\nimport { Actions } from './components/Actions';\nimport * as actions from './redux/actions';\n\ninterface Methods {\n  setIsLoaded: (status: boolean) => void;\n  setIsLoading: (status: boolean) => void;\n  setTodos: (todos: Todo[]) => void;\n}\n\ntype Props = Methods & {\n  isLoaded: boolean;\n  isLoading: boolean;\n};\n\n\nconst AppTemplate: FC<Props> = ({\n  isLoaded, isLoading, setIsLoaded,\n  setIsLoading, setTodos,\n}) => {\n  async function handleStart() {\n    setIsLoaded(true);\n    setIsLoading(true);\n\n    const [\n      todosFromServer,\n      usersFromServer,\n    ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]);\n\n    setTodos(todosFromServer.map((todo) => (\n      {\n        ...todo,\n        user: usersFromServer\n          .find((user) => user.id === todo.userId),\n      })));\n\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      {isLoaded\n    && (\n      <Actions />\n    )}\n\n      {!isLoaded\n     && (\n       <button\n         className=\"button\"\n         type=\"button\"\n         onClick={handleStart}\n       >\n       Press to start\n       </button>\n     )}\n      {isLoading ? <p>Loading...</p> : <TodoList />}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: { loadReducer: LoadState }) => {\n  return {\n    isLoaded: state.loadReducer.isLoaded,\n    isLoading: state.loadReducer.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setIsLoaded: (status: boolean) => dispatch(actions.setIsLoaded(status)),\n    setIsLoading: (status: boolean) => dispatch(actions.setIsLoading(status)),\n    setTodos: (todos: Todo[]) => dispatch(actions.setTodos(todos)),\n  };\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppTemplate);\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst loadState: LoadState = {\n  isLoaded: false,\n  isLoading: false,\n};\n\nexport const loadReducer = (state = loadState, action: AnyAction): LoadState => {\n  switch (action.type) {\n    case type.SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n    case type.SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst todosState: TodoState = {\n  todos: [],\n};\n\nexport const todosReducer = (state = todosState, action: AnyAction): TodoState => {\n  switch (action.type) {\n    case type.DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos.filter(todo => todo.id !== action.index)],\n      };\n    case type.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst queryState: QuerySort = {\n  query: 'id',\n};\n\nexport const queryReducer = (state = queryState, action: AnyAction): QuerySort => {\n  switch (action.type) {\n    case type.SET_QUERY_SORT:\n      return {\n        query: action.query,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { loadReducer } from './loadReducer';\nimport { todosReducer } from './todoReducer';\nimport { queryReducer } from './queryReducer';\n\nexport const reducer = combineReducers({\n  loadReducer,\n  queryReducer,\n  todosReducer,\n});\n","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}