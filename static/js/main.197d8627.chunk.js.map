{"version":3,"sources":["components/Todo.tsx","redux/actions.ts","components/TodoList.tsx","api/getData.ts","api/constants.ts","components/Actions.tsx","App.tsx","redux/reducers/loadReducer.ts","redux/reducers/todoReducer.ts","redux/reducers/queryReducer.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["Todo","id","title","completed","user","deleteTodo","className","name","type","onClick","TodoList","connect","state","todos","todosReducer","query","queryReducer","dispatch","setDeleteTodo","index","actions","todosToShow","useMemo","length","sort","a","b","localeCompare","Number","reverse","map","todo","key","getData","url","fetch","response","json","getTodos","getUsers","Actions","setQuery","App","isLoaded","loadReducer","isLoading","setIsLoaded","status","setIsLoading","setTodos","Promise","all","finally","todosFromServer","usersFromServer","find","userId","loadState","todosState","queryState","reducer","combineReducers","action","filter","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.197d8627.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  id: number;\n  title: string;\n  completed: boolean;\n  user?: User;\n  deleteTodo: (id: number) => void;\n}\n\nexport const Todo: FC<Props> = ({\n  id, title, completed, user, deleteTodo,\n}) => {\n  return (\n    <>\n      <p className=\"title\">{`${id} ${title}`}</p>\n      {completed ? (\n        <p className=\"completed\">Yes</p>\n      ) : (\n        <p className=\"not-completed\">No</p>\n      )}\n      {user && (\n        <p>{user.name}</p>\n      )}\n      <button\n        type=\"button\"\n        className=\"button--close\"\n        onClick={() => deleteTodo(id)}\n      >\n        X\n      </button>\n    </>\n  );\n};\n","export const type = {\n  SET_IS_LOADED: 'SET_IS_LOADED',\n  SET_IS_LOADING: 'SET_IS_LOADING',\n  SET_QUERY_SORT: 'SET_QUERY_SORT',\n  SET_TODOS: 'SET_TODOS',\n  DELETE_TODO: 'DELETE_TODO',\n};\n\nexport const setIsLoaded = (value: boolean) => ({\n  type: type.SET_IS_LOADED,\n  isLoaded: value,\n});\n\nexport const setIsLoading = (value: boolean) => ({\n  type: type.SET_IS_LOADING,\n  isLoading: value,\n});\n\nexport const setQuerySort = (value: string) => ({\n  type: type.SET_QUERY_SORT,\n  query: value,\n});\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: type.SET_TODOS,\n  todos: [...todos],\n});\n\nexport const setDeleteTodo = (id: number) => ({\n  type: type.DELETE_TODO,\n  index: id,\n});\n","import React, { FC, useMemo } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { Todo } from './Todo';\nimport * as actions from '../redux/actions';\n\ninterface Props {\n  todos: Todo[];\n  query: string;\n  setDeleteTodo: (id: number) => void;\n}\n\nexport const TodoListTemplate: FC<Props> = ({ todos, query, setDeleteTodo }) => {\n  const todosToShow = useMemo(() => {\n    if (!todos.length) {\n      return [];\n    }\n\n    switch (query) {\n      case 'title':\n        return todos.sort((a, b) => a.title.localeCompare(b.title));\n\n      case 'user':\n        return todos\n          .sort((a, b) => {\n            if (a.user && b.user) {\n              return a.user.name.localeCompare(b.user.name);\n            }\n\n            return 0;\n          });\n\n      case 'completed':\n        return todos\n          .sort((a, b) => {\n            return Number(a.completed) - Number(b.completed);\n          });\n\n      case 'reverse': {\n        return todos.reverse();\n      }\n\n      default:\n        return todos;\n    }\n  }, [query, todos]);\n\n  return (\n    <>\n      <h1>Todo List</h1>\n      <ul className=\"card-list\">\n        {todosToShow.map(todo => (\n          <li className=\"card-item\" key={todo.id}>\n            <Todo {...todo} deleteTodo={setDeleteTodo} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: { todosReducer: TodoState; queryReducer: QuerySort }) => ({\n  todos: state.todosReducer.todos,\n  query: state.queryReducer.query,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setDeleteTodo: (id: number) => dispatch(\n      actions.setDeleteTodo(id),\n    ),\n  };\n};\n\nexport const TodoList = connect(mapStateToProps, mapDispatchToProps)(TodoListTemplate);\n","import { URL_TODOS, URL_USES } from './constants';\n\nasync function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getData(URL_TODOS);\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getData(URL_USES);\n};\n","export const URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\nexport const URL_USES = 'https://jsonplaceholder.typicode.com/users';\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { setQuerySort } from '../redux/actions';\n\ninterface Props {\n  setQuery: (query: string) => void;\n}\n\nconst ActionsTemplate: FC<Props> = ({\n  setQuery,\n}) => (\n  <>\n    <button\n      className=\"button\"\n      type=\"button\"\n      onClick={() => setQuery('title')}\n    >\n      Sort by title\n    </button>\n\n    <button\n      className=\"button\"\n      type=\"button\"\n      onClick={() => setQuery('user')}\n    >\n      Sort by user\n    </button>\n\n    <button\n      className=\"button\"\n      type=\"button\"\n      onClick={() => setQuery('completed')}\n    >\n      Sort by completed\n    </button>\n\n    <button\n      className=\"button\"\n      type=\"button\"\n      onClick={() => setQuery('reverse')}\n    >\n      Reverse\n    </button>\n  </>\n);\n\nconst mapStateToProps = (state: { queryReducer: QuerySort }) => {\n  return {\n    query: state.queryReducer.query,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setQuery: (query: string) => dispatch(setQuerySort(query)),\n  };\n};\n\nexport const Actions = connect(mapStateToProps, mapDispatchToProps)(ActionsTemplate);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { TodoList } from './components/TodoList';\nimport './App.css';\nimport { getTodos, getUsers } from './api/getData';\nimport { Actions } from './components/Actions';\nimport * as actions from './redux/actions';\n\ninterface Methods {\n  setIsLoaded: (status: boolean) => void;\n  setIsLoading: (status: boolean) => void;\n  setTodos: (todos: Todo[]) => void;\n}\n\ntype Props = Methods & {\n  isLoaded: boolean;\n  isLoading: boolean;\n};\n\n\nconst AppTemplate: FC<Props> = ({\n  isLoaded, isLoading, setIsLoaded,\n  setIsLoading, setTodos,\n}) => {\n  async function handleStart() {\n    setIsLoading(true);\n\n    const [\n      todosFromServer,\n      usersFromServer,\n    ] = await Promise.all([\n      getTodos(),\n      getUsers(),\n    ]).finally(() => setIsLoaded(true));\n\n    setTodos(todosFromServer.map((todo) => (\n      {\n        ...todo,\n        user: usersFromServer\n          .find((user) => user.id === todo.userId),\n      })));\n\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      {isLoaded ? (\n        <>\n          <Actions />\n          <TodoList />\n        </>\n      ) : (\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={handleStart}\n        >\n             Press to start\n        </button>\n      )}\n\n      {isLoading && <p>Loading...</p>}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: { loadReducer: LoadState }) => {\n  return {\n    isLoaded: state.loadReducer.isLoaded,\n    isLoading: state.loadReducer.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setIsLoaded: (status: boolean) => dispatch(actions.setIsLoaded(status)),\n    setIsLoading: (status: boolean) => dispatch(actions.setIsLoading(status)),\n    setTodos: (todos: Todo[]) => dispatch(actions.setTodos(todos)),\n  };\n};\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppTemplate);\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst loadState: LoadState = {\n  isLoaded: false,\n  isLoading: false,\n};\n\nexport const loadReducer = (state = loadState, action: AnyAction): LoadState => {\n  switch (action.type) {\n    case type.SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n\n    case type.SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst todosState: TodoState = {\n  todos: [],\n};\n\nexport const todosReducer = (state = todosState, action: AnyAction): TodoState => {\n  switch (action.type) {\n    case type.DELETE_TODO:\n      return {\n        todos: state.todos.filter(todo => todo.id !== action.index),\n      };\n    case type.SET_TODOS:\n      return {\n        todos: action.todos,\n      };\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { type } from '../actions';\n\nconst queryState: QuerySort = {\n  query: 'id',\n};\n\nexport const queryReducer = (state = queryState, action: AnyAction): QuerySort => {\n  switch (action.type) {\n    case type.SET_QUERY_SORT:\n      return {\n        query: action.query,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { loadReducer } from './loadReducer';\nimport { todosReducer } from './todoReducer';\nimport { queryReducer } from './queryReducer';\n\nexport const reducer = combineReducers({\n  loadReducer,\n  queryReducer,\n  todosReducer,\n});\n","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}